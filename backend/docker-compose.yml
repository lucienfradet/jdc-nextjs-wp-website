services:
  # WordPress MySQL Database
  db:
    image: mysql:5.7
    container_name: jdc-wp-db
    restart: always
    environment:
      MYSQL_DATABASE: jdc_db
      MYSQL_USER: ${MYSQL_WORDPRESS_USER}
      MYSQL_PASSWORD: ${MYSQL_WORDPRESS_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_WORDPRESS_ROOT_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - wp-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_WORDPRESS_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # WordPress Application
  wordpress:
    image: wordpress:latest
    container_name: jdc-wp-app
    depends_on:
      - db
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: ${MYSQL_WORDPRESS_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_WORDPRESS_PASSWORD}
      WORDPRESS_DB_NAME: jdc_db
      WORDPRESS_HOME: ${WORDPRESS_HOME}
      WORDPRESS_SITEURL: ${WORDPRESS_SITEURL}
    volumes:
      - ./wordpress/wp-content:/var/www/html/wp-content
      - ./wordpress/upload.ini:/usr/local/etc/php/conf.d/uploads.ini
      - ./wordpress/wp-config.php:/var/www/html/wp-config.php
      - ./wordpress/cron-setup:/cron-setup
    entrypoint: ["/cron-setup/entrypoint.sh"]
    networks:
      - wp-network

  # Orders Database (MySQL 8.0)
  jdc-orders-db:
    image: mysql:8.0
    container_name: jdc-orders-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_NEXTJS_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_NEXTJS_DATABASE}
      MYSQL_USER: ${MYSQL_NEXTJS_USER}
      MYSQL_PASSWORD: ${MYSQL_NEXTJS_PASSWORD}
      TZ: America/New_York
    volumes:
      - jdc-orders-data:/var/lib/mysql
      - ./jdc-orders-db/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./jdc-orders-db/init:/docker-entrypoint-initdb.d
    networks:
      - jdc-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_NEXTJS_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  jdc-redis:
    image: redis:7-alpine
    container_name: jdc-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jdc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cron Service for Next.js cleanup tasks
  cron:
    image: alpine:latest
    container_name: jdc-cron
    restart: unless-stopped
    volumes:
      - ./cron/entrypoint.sh:/entrypoint.sh
    command: /entrypoint.sh
    networks:
      - jdc-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  wp-network:
    driver: bridge
  jdc-network:
    driver: bridge

volumes:
  db_data:
  jdc-orders-data:
  redis_data:
